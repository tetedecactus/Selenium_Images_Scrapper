#! /usr/bin/env python3

# /======================= RELATIVE LINKS ===================================
#https://www.selenium.dev/documentation/webdriver/browsers/chrome/
#https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.chrome.webdriver
#https://python.plainenglish.io/web-scraping-images-with-python-and-selenium-792e452abd70
#https://www.analyticsvidhya.com/blog/2020/08/web-scraping-selenium-with-python/
#https://www.geeksforgeeks.org/image-scraping-with-python/
#https://www.projectpro.io/article/python-libraries-for-web-scraping/625#mcetoc_1gb5hj7o818

import os
import sys
import time
import shutil
import urllib
import requests 
import platform
import subprocess

from selenium import webdriver
import urllib.parse as urlparse
from urllib.request import urlopen
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.firefox.webdriver import WebDriver


# /===================== SET UP FUNCTION START ========================

# Script to check the User OS
def get_usr_os():
    system = platform.system()

    if system == "Windows":
        return "Windows"
    elif system == "Darwin":
        return "Mac"
    elif system == "Linux":
        return "Linux"
    else:
        print("Unknown OS: Program must by launch by: [Windows || MacOS || Linux]")
        exit()

usr_os = get_usr_os()

# Chek if Chrome is installed
def is_chrome_installed():
    system = platform.system()
    if system == "Windows":
        try:
            subprocess.check_output(['where', 'chrome'], stderr=subprocess.STDOUT)
            return True
        except subprocess.CalledProcessError:
            return False
    elif system == "Darwin":
        return shutil.which('google-chrome') is not None
    elif system == "Linux":
        return shutil.which('google-chrome') is not None or shutil.which('google-chrome-stable') is not None
    else:
        return False

# Chek if ChromeDriver is installed
def is_chromedriver_installed():
    system = platform.system()
    if system == "Windows":
        try:
            subprocess.check_output(['where', 'chromedriver'], stderr=subprocess. STDOUT)
            return True
        except subprocess.CalledProcessError:
            return False
    elif system == "Darwin":
        return shutil.which('chromedriver') is not None
    elif system == "Linux":
        return shutil.which('chromedriver') is not None
    else:
        return False

# Chek OS and default web browser
def get_user_dependecie():
    if usr_os == "Linux":
        if is_chrome_installed() == True and is_chromedriver_installed() == True:
            return [usr_os, True]
        else:
            print('Please read the README file to install Chrome or Chrome driver on Linux')
            exit()
    elif usr_os == "Mac":
        if is_chrome_installed() == True and is_chromedriver_installed() == True:
            return [usr_os, True] 
        else:
            print('Please read the README file to install Chrome or Chrome driver on Linux')
            exit()
        return get_default_browser_macos()
    elif usr_os == "Windows":
        if is_chrome_installed() == True and is_chromedriver_installed() == True:
            return [usr_os, True]
        else:
            print('Please read the README file to install Chrome or Chrome driver on Linux')
            exit()
    else:
        exit(1)

# Check Windows default web browser
def get_default_browser_windows():
    try:
        import winreg
    except ImportError:
        return None

    # PATH to default web browser
    reg_path = r"SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice"

    try:
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_path) as key:
            prog_id, _ = winreg.QueryValueEx(key, "Progid")
            return prog_id
    except Exception:
        return None

# Check MacOS default web browser
def get_default_browser_macos():
    try:
        output =  subprocess.check_ouput(["default", "read", "-g", "com.apple.LaunchServices/com.apple.launchservices.secure"])
        output_str = output.decode("utf-8")
        browser_bundle_id = output_str.split('"LSHandlerRoleAll" = "')[1].split('";')[0]
        return browser_bundle_id
    except Exception:
        return None

# Check Linux default web browser
def get_default_browser_linux():
    try:
        output = subprocess.check_output(["xdg-settings", "get", "default-web-browser"])
        browser_desktop_file = output.decode("utf-8").strip()
        return browser_desktop_file
    except Exception:
        return None

# must do a default function to make chrome and chromedriver, who could be change 
default_dependencies = ["Chrome", "ChromeDriver"]
# default_dependencies = ["Brave", "ChromeDriver"]
# default_dependencies = ["Firefox", "Geckodriver"]
# default_dependencies = ["Edge", "EdgeDriver"]
# default_dependencies = ["Chrome", "Chromedriver"]


# ============ SELENIUM USING LINUX ============================
# Script for the images scrapper using: Selenium | Linux | Chrome | Chromedriver by default

# Launch with Chrome web browser
def selenium_chrome():
    PATH_chromedriver = "/usr/bin/chromedriver"

    chrome_service = Service(executable_path=PATH_chromedriver)

    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')

    chrome_driver = webdriver.Chrome(service=chrome_service, options=chrome_options)
    chrome_driver = webdriver.Chrome() 
    chrome_driver.get(URL)
    chrome_driver.execute_script("window.scrollTo(0,document.body.scrollHeight);")

    time.sleep(5)

    imgResults = chrome_driver.find_elements(By.TAG_NAME, "img")

    # Access and store the src list of image URLs.
    src = []
    for img in imgResults:
        src.append(img.get_attribute('src'))

    # Create the 'sample_data' directory if it doesn't exist
    if not os.path.exists('sample_data'):
        os.makedirs('sample_data')

    # Retrieve and download the images.
    for i in range(len(src)):
        try:
            urllib.request.urlretrieve(str(src[i]), f"sample_data/img{i}.jpg")
        except urllib.error.HTTPError as e:
            print(f"Failed to download image {i} (HTTPError): {e}")
        except urllib.error.URLError as e:
            print(f"Failed to download image {i} (URLError): {e}")
        except socket.timeout as e:
            print(f"Failed to download image {i} (Timeout): {e}")
        except Exception as e:
            print(f"Failed to download image {i}: {e}")

    chrome_driver.quit()

# Launch with Firefox web browser
# def selenium_firefox():
#     PATH_firefoxdriver = "/usr/bin/geckodriver"
#     firefox_service = Service(executable_path=PATH_firefoxdriver)
#     firefox_options = webdriver.FirefoxOptions()
#     firefox_driver = webdriver.Firefox(service=firefox_service, options=firefox_options)
#     firefox_driver.get(URL)
#     firefox_driver.quit()

#Launch with Brave web browser
# def selenium_brave():
#     PATH_brave = "/usr/bin/brave-browser"
#     PATH_bravedriver = "/usr/bin/chromedriver"
#     brave_service = Service(executable_path=PATH_bravedriver)
#     brave_option = webdriver.ChromeOptions()
#     brave_option.binary_location = PATH_brave
#     brave_driver = webdriver.Chrome(service=brave_service, options=brave_option)
#     brave_driver.get(URL)
#     brave_driver.quit()

# Launch with Microsoft Edge web browser
# def selenium_edge():
#     PATH_edge = "/usr/bin/microsoft-edge"
#     PATH_edgedriver = "/usr/bin/edgedriver"
#     edge_service = Service(executable_path=PATH_edgedriver)
#     edge_option = webdriver.EdgeOptions()
#     edge_option.binary_location = PATH_edge
#     edge_driver = webdriver.Edge(service=edge_service, options=edge_option)
#     edge_driver.get(URL)
#     edge_driver.quit()

# /--------------------------------------------------

# /============== SELENIUM USING MACOS ==============================
# /===================================================

# /============== SELENIUM USING WINDOWS ============================
# /===================================================

# /===================== SET UP FUNCTION END ========================

# /===================== PROGRAM START ==============================

# Chek argv -> ./spider https://{LINK} -[rpg]
if len(sys.argv) != 2:
    print("Program Must be launch by : ./spider https://[YOURLINK]")
    exit()
else:
    URL = sys.argv[1]

# Put in result a list, ["User Os" True | False]
result = get_user_dependecie()

# Check if the Os got Chrome and Chromedriver installed
usr_os, is_true = result

if usr_os == "Linux" and is_true:
    selenium_chrome()
else:
    exit()